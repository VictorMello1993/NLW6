																		COMANDOS DO YARN
																		
																		
yarn init --y => Inicializa o projeto com o arquivo package.json criado
yarn add nomePacote => instala o pacote
yarn tsc --init => Inicializa Typescript com arquovo tsconfig.json criado
yarn tsc => Gera o arquivo JS correspondente ao código Typescript (Por padrão, o Node não entende a linguagem do Typescript)
yarn run nomeScript => executa algum script especificado na propriedade "scripts" do package.json para executar a aplicação (ex: yarn run dev)


ts-node-dev => Biblioteca responsável pela conversão automática de arquivos .ts em arquivos .js correspondentes para que o Node consiga interpretá-las.
			   Seria uma alternativa ao nodemon, por exemplo.

A partir da instalação desta dependência, no arquivo package.json, poderá criar um script de execução com o comando conforme a linha abaixo:

 "scripts": {
    "dev": "ts-node-dev src/server.ts"
  }
  
ts-node-dev ./node_modules/typeorm/cli.js => Executa script para criação de migrations dentro do arquivo cli.js do TypeOrm

yarn typeorm migration:create -n CreateUsers => Gera migration chamada CreateUsers
yarn typeorm migration:run => Executa migration para ser replicado ao banco de dados
yarn typeorm migration:revert => Executa a migration para reverter as alterações feitas no banco de dados
yarn typeorm entity:create -n User => Cria uma pasta onde fica as entidades e cria uma classe de entidade chamada User dentro dessa mesma pasta


Biblioteca de tipagens:
@types/express



//Tipos de parâmetros
// Route Params => http://localhost:3000/produtos/7889897789987
// Query Params => http://localhost:3000/produtos?name=teclado&description=tecladobom&preco=1.99
/*Body Params => {"name": "teclado",
                  "description": "teclado bom" 
                 }*/
//Não se utiliza corpo da requisição na requisição GET!! Somente POST ou PUT/PATCH


Documentação sobre JWT:
jwt.io

Biblioteca para gerar tokens JWT:
jsonwebtoken

É preciso instalar também as tipageos do JWT:
@types/jsonwebtoken -D

Lembrando que as bibliotecas de tipagens devem ser instaladas no ambiente de desenvolvimento.

Biblioteca de criptografia:
bcryptjs

Tipagens do bcryptjs
@types/bcryptjs -D

Site para gerar chave secreta:
md5 hash generator

Biblioteca para customização de classes:
class-transformer